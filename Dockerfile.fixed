# 修正版本 - 支持运行时初始化和SQLite

# =============================================================================
# 阶段1: 构建应用
# =============================================================================
FROM node:22-alpine AS builder

# 安装构建工具
RUN apk add --no-cache git

# 设置工作目录
WORKDIR /app

# 复制依赖文件和源代码
COPY package.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY packages/ ./packages/
COPY example/ ./example/

# 安装pnpm
RUN npm install -g pnpm

# 设置pnpm镜像源
RUN pnpm config set registry https://registry.npmmirror.com/

# 修复changesets版本问题
RUN if grep -q '"@changesets/cli": "catalog:"' package.json; then \
    sed -i 's/"@changesets\/cli": "catalog:"/"@changesets\/cli": "^2.29.6"/' package.json; \
    fi

# 安装所有依赖
RUN pnpm install

# 构建基础包
RUN pnpm build:pkgs

# 构建React应用（使用默认环境变量）
RUN cd packages/react-app && \
    export PUBLIC_APP_API_BASE=http://localhost:5300/api/client && \
    export PUBLIC_DIFY_PROXY_API_BASE=http://localhost:5300/api/client/dify && \
    pnpm build

# 构建Platform后端（只生成客户端，不初始化数据库）
RUN cd packages/platform && \
    pnpm prisma generate && \
    pnpm build

# =============================================================================
# 阶段2: 生产环境运行时
# =============================================================================
FROM node:22-alpine AS runtime

# 安装运行时依赖
RUN apk add --no-cache nginx curl openssl

# 创建应用用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# 设置工作目录
WORKDIR /app

# 从builder阶段复制完整的packages目录（保持workspace结构）
COPY --from=builder --chown=nextjs:nodejs /app/packages ./packages

# 复制根目录配置文件
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder --chown=nextjs:nodejs /app/pnpm-workspace.yaml ./pnpm-workspace.yaml

# 复制nginx配置
COPY --from=builder --chown=nextjs:nodejs /app/packages/react-app/dist ./html/chat
COPY --from=builder /app/example/nginx.conf.example /etc/nginx/nginx.conf

# 创建日志目录
RUN mkdir -p logs && \
    chown -R nextjs:nodejs /app

# 安装生产依赖（只安装runtime需要的）
RUN npm install -g pnpm pm2 && \
    pnpm install --prod

# 创建自动化初始化脚本
RUN echo 'import bcrypt from "bcryptjs"' > packages/platform/scripts/auto-init.js && \
    echo 'import { PrismaClient } from "@prisma/client"' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo 'const prisma = new PrismaClient()' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo 'const DEFAULT_ADMIN = {' >> packages/platform/scripts/auto-init.js && \
    echo '  email: "admin@dify-chat.com",' >> packages/platform/scripts/auto-init.js && \
    echo '  password: "admin123!",' >> packages/platform/scripts/auto-init.js && \
    echo '  name: "Dify Chat Administrator"' >> packages/platform/scripts/auto-init.js && \
    echo '}' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo 'async function initializeDatabase() {' >> packages/platform/scripts/auto-init.js && \
    echo '  console.log("🔍 检查数据库初始化状态...")' >> packages/platform/scripts/auto-init.js && \
    echo '  try {' >> packages/platform/scripts/auto-init.js && \
    echo '    await prisma.$queryRaw\`SELECT 1\`' >> packages/platform/scripts/auto-init.js && \
    echo '    console.log("✅ 数据库连接正常")' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo '    const adminCount = await prisma.user.count({' >> packages/platform/scripts/auto-init.js && \
    echo '      where: { email: DEFAULT_ADMIN.email }' >> packages/platform/scripts/auto-init.js && \
    echo '    })' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo '    if (adminCount === 0) {' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log("👤 创建默认管理员账户...")' >> packages/platform/scripts/auto-init.js && \
    echo '      const hashedPassword = await bcrypt.hash(DEFAULT_ADMIN.password, 12)' >> packages/platform/scripts/auto-init.js && \
    echo '      await prisma.user.create({' >> packages/platform/scripts/auto-init.js && \
    echo '        data: {' >> packages/platform/scripts/auto-init.js && \
    echo '          email: DEFAULT_ADMIN.email,' >> packages/platform/scripts/auto-init.js && \
    echo '          password: hashedPassword,' >> packages/platform/scripts/auto-init.js && \
    echo '          name: DEFAULT_ADMIN.name,' >> packages/platform/scripts/auto-init.js && \
    echo '          role: "ADMIN"' >> packages/platform/scripts/auto-init.js && \
    echo '        }' >> packages/platform/scripts/auto-init.js && \
    echo '      })' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log(\`✅ 默认管理员账户创建成功:\`)' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log(\`   邮箱: \${DEFAULT_ADMIN.email}\`)' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log(\`   密码: \${DEFAULT_ADMIN.password}\`)' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log(\`   ⚠️  请在生产环境中立即修改默认密码！\`)' >> packages/platform/scripts/auto-init.js && \
    echo '    } else {' >> packages/platform/scripts/auto-init.js && \
    echo '      console.log("👤 管理员账户已存在")' >> packages/platform/scripts/auto-init.js && \
    echo '    }' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo '    console.log("🎉 数据库初始化完成！")' >> packages/platform/scripts/auto-init.js && \
    echo '  } catch (error) {' >> packages/platform/scripts/auto-init.js && \
    echo '    console.error("❌ 数据库初始化失败:", error)' >> packages/platform/scripts/auto-init.js && \
    echo '    throw error' >> packages/platform/scripts/auto-init.js && \
    echo '  }' >> packages/platform/scripts/auto-init.js && \
    echo '}' >> packages/platform/scripts/auto-init.js && \
    echo '' >> packages/platform/scripts/auto-init.js && \
    echo 'initializeDatabase().catch(console.error)' >> packages/platform/scripts/auto-init.js

# 创建PM2配置文件
RUN echo 'export default {' > ecosystem.config.js && \
    echo '  apps: [{' >> ecosystem.config.js && \
    echo '    name: "dify-chat-platform",' >> ecosystem.config.js && \
    echo '    cwd: "./packages/platform",' >> ecosystem.config.js && \
    echo '    script: "pnpm",' >> ecosystem.config.js && \
    echo '    args: "start",' >> ecosystem.config.js && \
    echo '    env: {' >> ecosystem.config.js && \
    echo '      NODE_ENV: "production",' >> ecosystem.config.js && \
    echo '      PORT: 5300' >> ecosystem.config.js && \
    echo '    },' >> ecosystem.config.js && \
    echo '    instances: 1,' >> ecosystem.config.js && \
    echo '    exec_mode: "fork",' >> ecosystem.config.js && \
    echo '    watch: false,' >> ecosystem.config.js && \
    echo '    max_memory_restart: "1G",' >> ecosystem.config.js && \
    echo '    error_file: "./logs/platform-error.log",' >> ecosystem.config.js && \
    echo '    out_file: "./logs/platform-out.log",' >> ecosystem.config.js && \
    echo '    log_file: "./logs/platform-combined.log",' >> ecosystem.config.js && \
    echo '    time: true,' >> ecosystem.config.js && \
    echo '    autorestart: true,' >> ecosystem.config.js && \
    echo '    max_restarts: 10,' >> ecosystem.config.js && \
    echo '    min_uptime: "10s"' >> ecosystem.config.js && \
    echo '  }]' >> ecosystem.config.js && \
    echo '};' >> ecosystem.config.js

# 创建启动脚本
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 设置环境变量' >> /app/start.sh && \
    echo 'if [ ! -z "$DATABASE_URL" ]; then' >> /app/start.sh && \
    echo '  echo "DATABASE_URL=$DATABASE_URL" > /app/packages/platform/.env' >> /app/start.sh && \
    echo 'else' >> /app/start.sh && \
    echo '  echo "DATABASE_URL=file:./prod.db" > /app/packages/platform/.env' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'if [ ! -z "$NEXTAUTH_SECRET" ]; then' >> /app/start.sh && \
    echo '  echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> /app/packages/platform/.env' >> /app/start.sh && \
    echo 'else' >> /app/start.sh && \
    echo '  echo "NEXTAUTH_SECRET=$(openssl rand -base64 32)" >> /app/packages/platform/.env' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 运行时环境变量注入' >> /app/start.sh && \
    echo 'if [ ! -z "$PUBLIC_APP_API_BASE" ]; then' >> /app/start.sh && \
    echo '  find /app/html/chat -name "*.js" -exec sed -i "s|http://localhost:5300/api/client|$PUBLIC_APP_API_BASE|g" {} \\;' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'if [ ! -z "$PUBLIC_DIFY_PROXY_API_BASE" ]; then' >> /app/start.sh && \
    echo '  find /app/html/chat -name "*.js" -exec sed -i "s|http://localhost:5300/api/client/dify|$PUBLIC_DIFY_PROXY_API_BASE|g" {} \\;' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 幂等性初始化（依赖Prisma和脚本自身的幂等性）' >> /app/start.sh && \
    echo 'echo "🔧 同步数据库结构..."' >> /app/start.sh && \
    echo 'cd /app/packages/platform && pnpm prisma db push' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 检查并创建默认管理员账户（幂等操作）' >> /app/start.sh && \
    echo 'echo "👤 检查并初始化管理员账户..."' >> /app/start.sh && \
    echo 'node scripts/auto-init.js' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 显示启动信息' >> /app/start.sh && \
    echo 'echo "🚀 Dify Chat Docker 容器启动成功！"' >> /app/start.sh && \
    echo 'echo "📱 React App: http://localhost/chat"' >> /app/start.sh && \
    echo 'echo "🔧 Platform API: http://localhost:5300"' >> /app/start.sh && \
    echo 'echo "👤 默认管理员: admin@dify-chat.com / admin123"' >> /app/start.sh && \
    echo 'echo "⚠️  请立即修改默认密码！"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# 启动服务' >> /app/start.sh && \
    echo 'nginx -g "daemon off;" &' >> /app/start.sh && \
    echo 'su nextjs -c "cd /app && pm2-runtime ecosystem.config.js"' >> /app/start.sh

RUN chmod +x /app/start.sh

# 暴露端口
EXPOSE 5300 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:5300/ || curl -f http://localhost/chat/index.html || exit 1

# 切换到非root用户
USER nextjs

# 启动应用
CMD ["/app/start.sh"]